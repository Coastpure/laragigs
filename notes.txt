ROUTES 

Route::get('/hello', function() {
    return 'hello world';
});

//returns hello world

Route::get('/posts/{id}', function($id) {
    return response('Post ' . $id);
})->where('id', '[0-9]+');

//returns post and id ie http://laragigs.test/posts/12  ...it will return Post 12, where function is used
to add constraint i.e number has to be 0-9+ , we can remove it anytime



Dump, Die, Debug
//we add ddd
Route::get('/posts/{id}', function($id) {
    ddd($id);
    return response('Post ' . $id);
})->where('id', '[0-9]+');

//we can see alot of info by adding ddd, like php version, laravel version etc


   SEARCH
Route::get('/search', function(Request $request) {
    dd($request);
});

http://laragigs.test/search?name=Brad&city=Boston
it will show many things, to see name and city     query > parameters 

to acces those values directly add  to dd, i,e 
 dd($request->name . ' ' . $request->city);
 or you dont have to use dd, you can use return i.e
 return $request->name . ' ' . $request->city;

 it will show Brad Boston

 API PHP

 Route::get('/posts', function() {
    return response()->json([
        'posts' => [
            [
                'title' => 'Post One'
            ]
        ]
    ]);
});


inspect > networks > posts, you will see info of the API


IF ELSE
@if(count($listings) == 0)
<p>No listings found</p>
@endif


DATABASE
Install database if you dont have, for me I have 

create a new database name = laragigs, hostname = localhost, 
password = password, username = simon 

make migration 
php artisan make:migration create_listings_table

open it, under schema add 
    $table->string('title');
            $table->string('tags');
            $table->string('company');
            $table->string('location');
            $table->string('email');
            $table->string('website');
            $table->longText('description');

to add the info to database, run  php artisan migrate 

SEEDING DATA
thats how we can quickly get stuff into the database to test things with

database     userfactory.php    it creates fake names etc 
                                'name' => fake()->name(),
                                'email' => fake()->unique()->safeEmail(),

open databaseseeder.php                              
un comment  \App\Models\User::factory(10)->create();

run php artisan db:seed 
check database, a new users database table has been created, with random names

to refresh the database 
run php artisan migrate:refresh
the table will have been cleared out

to create that random table again, run 
php artisan migrate:refresh --seed

create a new model, run 
php artisan make:model Listing

creates a model called Listing 
class Listing extends Model, hover on model and press ctrl and click
it shows you the file that Model has been extended from


in DatabaseSeeder.php add a listing to create a table at listing 

paste 
    Listing::create(
            [
                'title' => 'Full-Stack Engineer',
                'tags' => 'laravel, backend ,api',
                'company' => 'Stark Industries',
                'location' => 'New York, NY',
                'email' => 'email2@email.com',
                'website' => 'https://www.starkindustries.com',
                'description' => 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam minima et illo reprehenderit quas possimus voluptas repudiandae cum expedita, eveniet aliquid, quam illum quaerat consequatur! Expedita ab consectetur tenetur delensiti?'
              ],
         );

run  php artisan migrate:refresh --seed
a listing will have been added to the listings table 
when you refresh the website, the description will show

TO CREATE OUR OWN FACTORY
run php artisan make:factory ListingFactory

//problem with factory creation


1:22:00


COMPONENTS AND PROPS 
create new folder components in views, then new file listing-card.blade.php
on the top add 
@props(['listing'])

then the listings code below 
then on listings.blade.php, add  <x-listing-card :listing="$listing" /> under @foreach($listings as $listing)

1:40:00: