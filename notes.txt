ROUTES 

Route::get('/hello', function() {
    return 'hello world';
});

//returns hello world

Route::get('/posts/{id}', function($id) {
    return response('Post ' . $id);
})->where('id', '[0-9]+');

//returns post and id ie http://laragigs.test/posts/12  ...it will return Post 12, where function is used
to add constraint i.e number has to be 0-9+ , we can remove it anytime



Dump, Die, Debug
//we add ddd
Route::get('/posts/{id}', function($id) {
    ddd($id);
    return response('Post ' . $id);
})->where('id', '[0-9]+');

//we can see alot of info by adding ddd, like php version, laravel version etc


   SEARCH
Route::get('/search', function(Request $request) {
    dd($request);
});

http://laragigs.test/search?name=Brad&city=Boston
it will show many things, to see name and city     query > parameters 

to acces those values directly add  to dd, i,e 
 dd($request->name . ' ' . $request->city);
 or you dont have to use dd, you can use return i.e
 return $request->name . ' ' . $request->city;

 it will show Brad Boston

 API PHP

 Route::get('/posts', function() {
    return response()->json([
        'posts' => [
            [
                'title' => 'Post One'
            ]
        ]
    ]);
});


inspect > networks > posts, you will see info of the API


IF ELSE
@if(count($listings) == 0)
<p>No listings found</p>
@endif


DATABASE
Install database if you dont have, for me I have 

create a new database name = laragigs, hostname = localhost, 
password = password, username = simon 

Don

make migration 
php artisan make:migration create_listings_table

open it, under schema add 
    $table->string('title');
            $table->string('tags');
            $table->string('company');
            $table->string('location');
            $table->string('email');
            $table->string('website');
            $table->longText('description');

to add the info to database, run  php artisan migrate 

SEEDING DATA
thats how we can quickly get stuff into the database to test things with

database     userfactory.php    it creates fake names etc 
                                'name' => fake()->name(),
                                'email' => fake()->unique()->safeEmail(),

open databaseseeder.php                              
un comment  \App\Models\User::factory(10)->create();

run php artisan db:seed 
check database, a new users database table has been created, with random names

to refresh the database 
run php artisan migrate:refresh
the table will have been cleared out

to create that random table again, run 
php artisan migrate:refresh --seed

create a new model, run 
php artisan make:model Listing

creates a model called Listing 
class Listing extends Model, hover on model and press ctrl and click
it shows you the file that Model has been extended from


in DatabaseSeeder.php add a listing to create a table at listing 

paste 
    Listing::create(
            [
                'title' => 'Full-Stack Engineer',
                'tags' => 'laravel, backend ,api',
                'company' => 'Stark Industries',
                'location' => 'New York, NY',
                'email' => 'email2@email.com',
                'website' => 'https://www.starkindustries.com',
                'description' => 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam minima et illo reprehenderit quas possimus voluptas repudiandae cum expedita, eveniet aliquid, quam illum quaerat consequatur! Expedita ab consectetur tenetur delensiti?'
              ],
         );

run  php artisan migrate:refresh --seed
a listing will have been added to the listings table 
when you refresh the website, the description will show

TO CREATE OUR OWN FACTORY
run php artisan make:factory ListingFactory

//problem with factory creation


1:22:00


COMPONENTS AND PROPS 
create new folder components in views, then new file listing-card.blade.php
on the top add 
@props(['listing'])

then the listings code below 
then on listings.blade.php, add  <x-listing-card :listing="$listing" /> under @foreach($listings as $listing)

to create a card, make a new file card.blade.php
add 
<div {{$attributes->merge(['class' => 'bg-gray-50 border border-gray-200 rounded p-6']) }} >
{{$slot}}



CONTROLLERS 
php artisan make:controller ListingController
it will create a new Listing controller

controller is connected with the routes
we move the web.php functionality, which is in the routes into a controller

NAMING CONVENTIONS
Common Resource Routes: 
index - show all listings 
show - show single listing 
create - show form to create new listing 
store - store new listings 
edit - show form to edit listings
destroy - delete listing

make a new folder in views called listings move listings.blade and listing.blade there 
rename them to index and show
then on controllers change return to listings.index and listings.index to acces the files

MAKING THE LAYOUT BE A COMPONENT
make the layout page a component 
move it to components folder 
and {{$slot}} where yield was, then to call it wrap it around other components with <x-layout>


FILTERING 


TAGS FILTERING
filter posts that have only that tag in them

scope filter
In listingcontroller
use the dd function in the controller

Method 1 - Dependancy Injection
add (Request $request) in public function and to be public function index (Request $request)
dd($request); below it

click on laravel tag, it will show requests, you will see tag = laravel in 
+query: Symfony\Component\HttpFoundation\InputBag {#51 ▼
    #parameters: array:1 [▼
      "tag" => "laravel"


Method 2 - Helper
there is a request helper, we dont need to pass Request $request in, delete them and remove $ in dd($request)
its gonna be a function, make it dd(request())
when you reload it will show the same output

you can choose any method you want, we are going to use the second one

now we know how to get our request
To get the actual tag

Method 1
dd(request()->tag); 
when you reload you'll only see the laravel name

Method 2 
dd(request('tag')); 
it will show the same thing in both cases we are adding tag

in our model, i.e Listing.php create a function 
public function scopeFilter() {}
it's going to take in a query

in listingcontroller, remove all() in return, then add 
'listings' => Listing::latest()->get()  //here the page will sort by the latest instead of randomly
remove the dd(request('tag')); line



to do the filtering
add filter(request('tag')) in ListingController
'listings' => Listing::latest()->filter(request('tag'))->get()
and that will get passed in as filters from, listing.php 
it has to be an array as indicated on listing.php, so add square brackets ['tag']
it now becomes  'listings' => Listing::latest()->filter(request(['tag']))->get()

in listing php, add dd 
dd($filters['tag']);
when you reload you will see laravel, like we were seeing before
lets check for this by adding if, to make sure it happens if only there is a tag

we use the Null coalescing operator i.e   ??
if($filters['tag'] ?? false ) {}
difference between iteneary operator and null coalescing is that tiniery Operator checks whether the value is true,
  but Null coalescing operator checks if the value is not null
In this case, if it is not false move on, if there is a tag, do what is inside, if not it wont do anything 

lets take that query that we have 
query->where(); 
this is like an sql like query, we want to look in the tags column in the database, so 'tags', 'like'
the request/tag that comes in we want, anything can be before or after it, and that is represented by a % sign
then we are going to concantinate it . request('tag') whatever the request tag is, which is tag
and then concantinate and put another % sign after it . '%', we finally have 

 $query->where('tags', 'like', '%' . request('tag') . '%' );
it's going to search whatever that tag is in the tags column in the database table
the tags column is the first 'tag', it is going to search for the tag using request('tag')
and if it matches, that will get returned

to test change some tags in the databse, if you click on one tag, it will filter

In the controller it will be 
'listings' => Listing::latest()->filter(request(['tag',]))->get()

In the model it will be 
 public function scopeFilter($query, array $filters) {
$query->where('tags', 'like', '%' . request('tag') . '%' );  }






SEARCH FILTER

add a scope filter to the current one
make sure the search button in views has name, name="search", because it's what is showing in the address bar when u click it
and it's going to be a get request by default, we dont have to specify it
in our controller, in addition to tag we can pass in search i.e 
'listings' => Listing::latest()->filter(request(['tag', 'search']))->get()

and then in our model, where we have our scope filter, copy the if statement
if($filters['search'] ?? false ) , put search
then choose where we are going to search from, we want it to search from title, so 
$query->where('title', 'like', '%' . request('search') . '%' )   //search coz that's what we are matching

to search in another field add another query, eg if we want to search from description, under that we put 
->orWhere('description', 'like', '%' . request('search') . '%' ) 
to search from tags 
->orWhere('tags', 'like', '%' . request('search') . '%' ); 

in the controller it will be 
'listings' => Listing::latest()->filter(request(['tag', 'search']))->get()

in the model it will be 
if($filters['search'] ?? false ) {
            $query->where('title', 'like', '%' . request('search') . '%' )
            ->orWhere('description', 'like', '%' . request('search') . '%' ) 
            ->orWhere('tags', 'like', '%' . request('search') . '%' ); 



The search filter overall will be: 

In controller 
public function index() {    
        return view('listings.index', [ 
             'listings' => Listing::latest()->filter(request(['tag', 'search']))->get()
             //above, we are sorting by the latest instead of a random order in all()
        ]);
    }

In model it will be 

public function scopeFilter($query, array $filters) {

        if($filters['tag'] ?? false ) {
            $query->where('tags', 'like', '%' . request('tag') . '%' ); 
        }
        if($filters['search'] ?? false ) {
            $query->where('title', 'like', '%' . request('search') . '%' )
            ->orWhere('description', 'like', '%' . request('search') . '%' ) 
            ->orWhere('tags', 'like', '%' . request('search') . '%' ); 
        }


2:01:00